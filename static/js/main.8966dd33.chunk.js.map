{"version":3,"sources":["Trie.ts","Overlay.tsx","OverlayHelp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TrieNode","value","words","children","this","JSON","stringify","Trie","head","mapLetters","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","word","curr","char","digit","toUpperCase","node","toString","sequence","endsWith","Object","keys","console","log","entries","child","traverse","T9","dictionary","trie","Set","forEach","addWord","add","getValidWords","Overlay","props","useState","setWords","style","display","open","className","onClick","onBackgroundClick","onChange","newWords","inputProps","placeholder","OverlayHelp","numberPad","1","label","subLabel","2","3","4","5","6","7","8","9","App","t9","setT9","setOpen","isOpenHelp","setIsOpenHelp","setSequence","setWord","validWords","setValidWords","handleBackgroundClick","type","event","target","map","index","key","updatedSequence","handleKey","slice","length","handleBack","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8966dd33.chunk.js","sourcesContent":["export class TrieNode {\r\n  value: string = '';\r\n  words:{[word: string]: number} = {};\r\n  children: {[char: string]: TrieNode} = {};\r\n\r\n  toString() {\r\n    return `value: ${this.value}, words: ${JSON.stringify(this.words)}`;\r\n  }\r\n}\r\n\r\nexport class Trie {\r\n  head: TrieNode = new TrieNode();\r\n  mapLetters: {[letter: string]: number} = {\r\n    A: 2,\r\n    B: 2,\r\n    C: 2,\r\n    D: 3,\r\n    E: 3,\r\n    F: 3,\r\n    G: 4,\r\n    H: 4,\r\n    I: 4,\r\n    J: 5,\r\n    K: 5,\r\n    L: 5,\r\n    M: 6,\r\n    N: 6,\r\n    O: 6,\r\n    P: 7,\r\n    Q: 7,\r\n    R: 7,\r\n    S: 7,\r\n    T: 8,\r\n    U: 8,\r\n    V: 8,\r\n    W: 9,\r\n    X: 9,\r\n    Y: 9,\r\n    Z: 9,\r\n  };\r\n\r\n  add(word: string): TrieNode {\r\n    let curr = this.head;\r\n\r\n    for (let char of word) {\r\n      let digit = this.mapLetters[char.toUpperCase()];\r\n      if (!curr.children[digit]) {\r\n        let node = new TrieNode();\r\n        node.value = digit.toString();\r\n        curr.children[digit] = node;\r\n      }\r\n      curr = curr.children[digit];\r\n    }\r\n    curr.words[word] ? curr.words[word] += 1 : curr.words[word] = 1;\r\n\r\n    return curr;\r\n  }\r\n\r\n  getValidWords(sequence: string): string[] {\r\n    let curr = this.head;\r\n    for (let digit of sequence) {\r\n      let node: TrieNode | undefined = curr.children[digit];\r\n      if (node){\r\n        curr = node;\r\n        continue;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (sequence.endsWith(curr.value)) {\r\n      return Object.keys(curr.words);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  isValid(word: string) {\r\n    let curr = this.head;\r\n    for (let char of word) {\r\n      let digit = this.mapLetters[char.toUpperCase()];\r\n      let node: TrieNode | undefined = curr.children[digit];\r\n      if (node){\r\n        curr = node;\r\n        continue;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (curr.words[word]) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  traverse(node: TrieNode) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n\r\n    console.log(node.toString());\r\n\r\n    for (const [, child] of Object.entries(node.children)) {\r\n      this.traverse(child);\r\n    }\r\n  }\r\n\r\n  print() {\r\n    this.traverse(this.head)\r\n  }\r\n}\r\n\r\nexport class T9 {\r\n  dictionary: Set<string>;\r\n  trie: Trie =  new Trie();\r\n\r\n  constructor(words: string[] = []) {\r\n    this.dictionary = new Set(words);\r\n\r\n    this.dictionary.forEach(word => {\r\n      this.addWord(word);\r\n    });\r\n  }\r\n\r\n  addWord(word: string) {\r\n    this.dictionary.add(word);\r\n    this.trie.add(word);\r\n  }\r\n\r\n  getValidWords(sequence: string) {\r\n    // TODO: prompt user to add word?\r\n    return this.trie.getValidWords(sequence);\r\n  }\r\n}","import React, { useState } from 'react';\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\n\r\nexport interface Props {\r\n  open: boolean;\r\n  onBackgroundClick?: (words: string[]) => void;\r\n}\r\n\r\nexport const Overlay: React.FC<Props> = (props) => {\r\n  const [words, setWords] = useState([] as string[]);\r\n\r\n  const inputProps = {\r\n    placeholder: 'Add word',\r\n  };\r\n\r\n  const handleBackgroundClick = () => {\r\n    return props.onBackgroundClick ? props.onBackgroundClick(words) : null\r\n  };\r\n\r\n  return (\r\n    <div style={{display: props.open === true ? 'block' : 'none'}}>\r\n      <div \r\n      className=\"overlay\"\r\n      onClick={() => handleBackgroundClick()}\r\n      />\r\n      <div className=\"overlay-content\">\r\n        <TagsInput \r\n          value={words} \r\n          onChange={(newWords) => setWords(newWords)}\r\n          inputProps={inputProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport interface Props {\r\n  open: boolean;\r\n  onBackgroundClick?: () => void;\r\n}\r\n\r\nexport const OverlayHelp: React.FC<Props> = (props) => {\r\n  const handleBackgroundClick = () => {\r\n    return props.onBackgroundClick ? props.onBackgroundClick() : null\r\n  };\r\n\r\n  return (\r\n    <div style={{display: props.open === true ? 'block' : 'none'}}>\r\n      <div \r\n      className=\"overlay\"\r\n      onClick={() => handleBackgroundClick()}\r\n      />\r\n      <div className=\"overlay-content\">\r\n        <div className=\"help-title\">\r\n          Overview\r\n        </div>\r\n        <div className=\"help-content\">\r\n          Type in a sequence and view suggested words. Tap on a suggested word to select it.\r\n          Add words to the dictionary by tapping the logo in upper left corner.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {T9} from './Trie';\nimport {Overlay} from './Overlay';\nimport {OverlayHelp} from './OverlayHelp';\n\nconst numberPad = {\n  1: {\n    label: '1',\n    subLabel: '.,?/',\n  },\n  2: {\n    label: '2',\n    subLabel: 'ABC',\n  },\n  3: {\n    label: '3',\n    subLabel: 'DEF',\n  },\n  4: {\n    label: '4',\n    subLabel: 'GHI',\n  },\n  5: {\n    label: '5',\n    subLabel: 'JKL',\n  },\n  6: {\n    label: '6',\n    subLabel: 'MNO',\n  },\n  7: {\n    label: '7',\n    subLabel: 'PQRS',\n  },\n  8: {\n    label: '8',\n    subLabel: 'TUV',\n  },\n  9: {\n    label: '9',\n    subLabel: 'WXYZ',\n  },\n}\n\nconst App: React.FC = () => {\n  const [t9, setT9] = useState(new T9(['a', 'I', 'am', 'me', 'you']));\n\n  const [open, setOpen] = useState(false);\n  const [isOpenHelp, setIsOpenHelp] = useState(false);\n\n  const [sequence, setSequence] = useState('');\n  const [word, setWord] = useState('');\n  const [validWords, setValidWords] = useState([] as string[]);\n\n  const handleKey = (label: string) => {\n    const updatedSequence = sequence + label;\n    setSequence(updatedSequence);\n    const words = t9.getValidWords(updatedSequence);\n    setValidWords(words);\n  };\n\n  const handleBack = () => {\n    const updatedSequence = sequence.slice(0, sequence.length - 1);\n    setSequence(updatedSequence);\n    const words = t9.getValidWords(updatedSequence);\n    setValidWords(words);\n  };\n\n  const handleWord = (suggestedWord: string) => {\n    setWord(suggestedWord);\n  };\n\n  const handleBackgroundClick = (words: string[]) => {\n    setOpen(false);\n    words.forEach((word: string) => {\n      t9.addWord(word);\n    });\n    setT9(t9);\n  }\n\n  return (\n    <div className=\"App\">\n      <Overlay \n        open={open} \n        onBackgroundClick={(words) => handleBackgroundClick(words)}/>\n      <OverlayHelp\n        open={isOpenHelp}\n        onBackgroundClick={() => setIsOpenHelp(false)}\n      />\n      <div className=\"toolbar\">\n        <div className=\"logo\" onClick={() => setOpen(true)}>\n          T9\n        </div>\n        <div className=\"help\" onClick={() => setIsOpenHelp(true)}>\n          &#x3f;\n        </div>\n      </div>\n      <div className=\"phone\">\n        <div className=\"number-pad\">\n          <div className=\"selected-word\">\n            {word}\n          </div>\n          <input className=\"text-box\" type=\"number\" value={sequence} onChange={(event) => {\n            let label = event.target.value;\n            setSequence(label);\n            const words = t9.getValidWords(label);\n            setValidWords(words);\n            }}/>\n          <div className=\"suggestions\">\n            {\n              validWords.map((word, index) => (\n                <div className=\"word\" key={index} onClick={() => handleWord(word)}>\n                  {word}\n                </div>\n              ))\n            }\n          </div>\n          { \n            Object.entries(numberPad).map((index, key) => \n              <div className=\"number-key\" key={key} onClick={() => handleKey(index[1].label)}>\n                <div className=\"label\">{index[1].label}</div>\n                <div className=\"sub-label\">{index[1].subLabel}</div>\n              </div>\n            ) \n          }\n          <div className=\"back-space\" onClick={() => handleBack()}>\n            &#9003;\n          </div> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}